-- v3 migrations
-- apply changes
CREATE TABLE auth_identity
(
    id UUID NOT NULL,
    CONSTRAINT pk_auth_identity PRIMARY KEY (id)
);

CREATE TABLE auth_permission
(
    id   UUID NOT NULL,
    name VARCHAR(255),
    CONSTRAINT uq_auth_permission_name UNIQUE (name),
    CONSTRAINT pk_auth_permission PRIMARY KEY (id)
);

CREATE TABLE auth_role
(
    id   UUID         NOT NULL,
    name VARCHAR(255) NOT NULL,
    CONSTRAINT pk_auth_role PRIMARY KEY (id)
);

CREATE TABLE auth_token
(
    token             CHAR(32) NOT NULL,
    authentication_id UUID     NOT NULL,
    last_used         TIMESTAMPTZ,
    CONSTRAINT uq_auth_token_authentication_id UNIQUE (authentication_id),
    CONSTRAINT pk_auth_token PRIMARY KEY (token)
);

CREATE TABLE authentication
(
    id          UUID NOT NULL,
    identity_id UUID NOT NULL,
    CONSTRAINT pk_authentication PRIMARY KEY (id)
);

CREATE TABLE didentity_role_bridge
(
    identity_id UUID,
    role_id     UUID,
    CONSTRAINT uq_didentity_role_bridge_role_id UNIQUE (role_id)
);

CREATE TABLE drole_permission_bridge
(
    role_id       UUID NOT NULL,
    permission_id UUID NOT NULL,
    CONSTRAINT uq_drole_permission_bridge_permission_id UNIQUE (permission_id)
);

CREATE TABLE duser
(
    id                    UUID NOT NULL,
    minecraft_uuid        UUID,
    discord_id_discord_id BIGINT,
    CONSTRAINT uq_duser_minecraft_uuid UNIQUE (minecraft_uuid),
    CONSTRAINT uq_duser_discord_id_discord_id UNIQUE (discord_id_discord_id),
    CONSTRAINT pk_duser PRIMARY KEY (id)
);

CREATE TABLE user_basic_credentials
(
    id               UUID         NOT NULL,
    user_id          UUID         NOT NULL,
    auth_identity_id UUID         NOT NULL,
    username         VARCHAR(255) NOT NULL,
    password         VARCHAR(255) NOT NULL,
    CONSTRAINT uq_user_basic_credentials_user_id UNIQUE (user_id),
    CONSTRAINT uq_user_basic_credentials_username UNIQUE (username),
    CONSTRAINT uq_user_basic_credentials_auth_identity_id UNIQUE (auth_identity_id),
    CONSTRAINT pk_user_basic_credentials PRIMARY KEY (id)
);

CREATE TABLE user_discord
(
    discord_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    user_id    UUID,
    CONSTRAINT uq_user_discord_user_id UNIQUE (user_id),
    CONSTRAINT pk_user_discord PRIMARY KEY (discord_id)
);

CREATE TABLE user_minecraft
(
    uuid    UUID NOT NULL,
    user_id UUID,
    CONSTRAINT uq_user_minecraft_user_id UNIQUE (user_id),
    CONSTRAINT pk_user_minecraft PRIMARY KEY (uuid)
);

-- foreign keys and indices
ALTER TABLE auth_token
    ADD CONSTRAINT fk_auth_token_authentication_id FOREIGN KEY (authentication_id) REFERENCES authentication (id) ON DELETE RESTRICT ON UPDATE RESTRICT;

CREATE INDEX ix_authentication_identity_id ON authentication (identity_id);
ALTER TABLE authentication
    ADD CONSTRAINT fk_authentication_identity_id FOREIGN KEY (identity_id) REFERENCES auth_identity (id) ON DELETE RESTRICT ON UPDATE RESTRICT;

CREATE INDEX ix_didentity_role_bridge_identity_id ON didentity_role_bridge (identity_id);
ALTER TABLE didentity_role_bridge
    ADD CONSTRAINT fk_didentity_role_bridge_identity_id FOREIGN KEY (identity_id) REFERENCES auth_identity (id) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE didentity_role_bridge
    ADD CONSTRAINT fk_didentity_role_bridge_role_id FOREIGN KEY (role_id) REFERENCES auth_role (id) ON DELETE RESTRICT ON UPDATE RESTRICT;

CREATE INDEX ix_drole_permission_bridge_role_id ON drole_permission_bridge (role_id);
ALTER TABLE drole_permission_bridge
    ADD CONSTRAINT fk_drole_permission_bridge_role_id FOREIGN KEY (role_id) REFERENCES auth_role (id) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE drole_permission_bridge
    ADD CONSTRAINT fk_drole_permission_bridge_permission_id FOREIGN KEY (permission_id) REFERENCES auth_permission (id) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE duser
    ADD CONSTRAINT fk_duser_minecraft_uuid FOREIGN KEY (minecraft_uuid) REFERENCES user_minecraft (uuid) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE duser
    ADD CONSTRAINT fk_duser_discord_id_discord_id FOREIGN KEY (discord_id_discord_id) REFERENCES user_discord (discord_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE user_basic_credentials
    ADD CONSTRAINT fk_user_basic_credentials_user_id FOREIGN KEY (user_id) REFERENCES duser (id) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE user_basic_credentials
    ADD CONSTRAINT fk_user_basic_credentials_auth_identity_id FOREIGN KEY (auth_identity_id) REFERENCES auth_identity (id) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE user_discord
    ADD CONSTRAINT fk_user_discord_user_id FOREIGN KEY (user_id) REFERENCES duser (id) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE user_minecraft
    ADD CONSTRAINT fk_user_minecraft_user_id FOREIGN KEY (user_id) REFERENCES duser (id) ON DELETE RESTRICT ON UPDATE RESTRICT;
-- END v3 migrations
-- BEGIN v4 migrations
-- drop dependencies
ALTER TABLE IF EXISTS didentity_role_bridge
    DROP CONSTRAINT IF EXISTS fk_didentity_role_bridge_identity_id;
ALTER TABLE IF EXISTS drole_permission_bridge
    DROP CONSTRAINT IF EXISTS fk_drole_permission_bridge_role_id;
-- apply changes
CREATE TABLE auth_identity_role_bridge
(
    identity_id UUID,
    role_id     UUID,
    CONSTRAINT uq_auth_identity_role_bridge_role_id UNIQUE (role_id)
);

CREATE TABLE auth_role_permission_bridge
(
    role_id       UUID NOT NULL,
    permission_id UUID NOT NULL,
    CONSTRAINT uq_auth_role_permission_bridge_permission_id UNIQUE (permission_id)
);

-- foreign keys and indices
CREATE INDEX ix_auth_identity_role_bridge_identity_id ON auth_identity_role_bridge (identity_id);
ALTER TABLE auth_identity_role_bridge
    ADD CONSTRAINT fk_auth_identity_role_bridge_identity_id FOREIGN KEY (identity_id) REFERENCES auth_identity (id) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE auth_identity_role_bridge
    ADD CONSTRAINT fk_auth_identity_role_bridge_role_id FOREIGN KEY (role_id) REFERENCES auth_role (id) ON DELETE RESTRICT ON UPDATE RESTRICT;

CREATE INDEX ix_auth_role_permission_bridge_role_id ON auth_role_permission_bridge (role_id);
ALTER TABLE auth_role_permission_bridge
    ADD CONSTRAINT fk_auth_role_permission_bridge_role_id FOREIGN KEY (role_id) REFERENCES auth_role (id) ON DELETE RESTRICT ON UPDATE RESTRICT;

ALTER TABLE auth_role_permission_bridge
    ADD CONSTRAINT fk_auth_role_permission_bridge_permission_id FOREIGN KEY (permission_id) REFERENCES auth_permission (id) ON DELETE RESTRICT ON UPDATE RESTRICT;
-- END v4 migrations

-- apply alter tables
ALTER TABLE guild
    ADD COLUMN id UUID;
ALTER TABLE guild
    ADD COLUMN is_active BOOLEAN DEFAULT TRUE NOT NULL;
ALTER TABLE play_session
    ADD COLUMN guild_id UUID;
-- apply post alter
ALTER TABLE auth_role_permission_bridge
    ADD CONSTRAINT uq_auth_role_permission_bridge_role_permission UNIQUE (role_id, permission_id);
-- foreign keys and indices
CREATE INDEX ix_play_session_guild_id ON play_session (guild_id);
ALTER TABLE play_session
    ADD CONSTRAINT fk_play_session_guild_id FOREIGN KEY (guild_id) REFERENCES guild (id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Set random id's
UPDATE guild
SET id = gen_random_uuid();

-- Alter primary key
ALTER TABLE play_session
    DROP CONSTRAINT fk_play_session_guild_name;
ALTER TABLE guild
    DROP CONSTRAINT pk_guild;
ALTER TABLE guild
    ADD PRIMARY KEY (id);
ALTER TABLE play_session
    ADD CONSTRAINT fk_play_session_guild_id FOREIGN KEY (guild_id) REFERENCES guild (id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- SET play_session.id
CREATE OR REPLACE FUNCTION playsession_guild_id()
    RETURNS VOID
AS
$$
DECLARE
    t_row GUILD%ROWTYPE;
BEGIN
    FOR t_row IN SELECT * FROM guild
        LOOP
            UPDATE play_session
            SET guild_id = t_row.id
            WHERE guild_name = t_row.name;
        END LOOP;
END;
$$
    LANGUAGE plpgsql;

SELECT playsession_guild_id();
DROP FUNCTION playsession_guild_id;
-- END SET play_session.id


SELECT FORMAT(
               'ALTER TABLE %I.%I.%I OWNER TO %I;',
               table_catalog,
               table_schema,
               table_name,
               'cloverbot' -- or another just put it in quotes
           )
FROM information_schema.tables
WHERE table_schema = 'public';


ALTER TABLE clover.public.levelup_run
    OWNER TO cloverbot;
ALTER TABLE clover.public.db_migration
    OWNER TO cloverbot;
ALTER TABLE clover.public.player
    OWNER TO cloverbot;
ALTER TABLE clover.public.raid_run
    OWNER TO cloverbot;
ALTER TABLE clover.public.login_queue
    OWNER TO cloverbot;
ALTER TABLE clover.public.blacklist
    OWNER TO cloverbot;
ALTER TABLE clover.public.player_character
    OWNER TO cloverbot;
ALTER TABLE clover.public.dungeon_run
    OWNER TO cloverbot;
ALTER TABLE clover.public.authentication
    OWNER TO cloverbot;
ALTER TABLE clover.public.auth_token
    OWNER TO cloverbot;
ALTER TABLE clover.public.auth_identity
    OWNER TO cloverbot;
ALTER TABLE clover.public.didentity_role_bridge
    OWNER TO cloverbot;
ALTER TABLE clover.public.auth_role
    OWNER TO cloverbot;
ALTER TABLE clover.public.drole_permission_bridge
    OWNER TO cloverbot;
ALTER TABLE clover.public.auth_permission
    OWNER TO cloverbot;
ALTER TABLE clover.public.user_minecraft
    OWNER TO cloverbot;
ALTER TABLE clover.public.duser
    OWNER TO cloverbot;
ALTER TABLE clover.public.user_discord
    OWNER TO cloverbot;
ALTER TABLE clover.public.user_basic_credentials
    OWNER TO cloverbot;
ALTER TABLE clover.public.auth_identity_role_bridge
    OWNER TO cloverbot;
ALTER TABLE clover.public.auth_role_permission_bridge
    OWNER TO cloverbot;
ALTER TABLE clover.public.guild
    OWNER TO cloverbot;
ALTER TABLE clover.public.play_session
    OWNER TO cloverbot;

